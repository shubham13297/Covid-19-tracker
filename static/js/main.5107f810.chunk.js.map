{"version":3,"sources":["Infobox.jsx","util.js","Map.jsx","Table.jsx","LineGraph.jsx","App.js","serviceWorker.js","index.js"],"names":["Infobox","props","Card","onClick","className","active","isRed","CardContent","Typography","color","title","cases","total","sortData","data","sort","a","b","caseTypeColors","hex","multiplier","recovered","deaths","prettyPrintStat","stat","numeral","format","Map","countries","caseType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","value","options","legend","display","elements","points","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","BuildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","Response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","selectedCountry","setSelectedcountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCaseType","response","name","iso2","filter","sortedData","getCountriesData","console","log","onCountrychange","event","countryCode","target","mapObj","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8VAyBeA,G,OArBC,SAACC,GACb,OACI,kBAACC,EAAA,EAAD,CAAMC,QAASF,EAAME,QAASC,UAAS,kBAAaH,EAAMI,QAAU,oBAA7B,YAAqDJ,EAAMK,OAASL,EAAMI,QAAW,iBACxH,kBAACE,EAAA,EAAD,KAEI,kBAACC,EAAA,EAAD,CAAYJ,UAAU,gBAAgBK,MAAM,iBACvCR,EAAMS,OAIX,wBAAIN,UAAS,yBAAoBH,EAAMK,OAAS,yBAA2BL,EAAMU,OAGjF,kBAACH,EAAA,EAAD,CAAYJ,UAAU,gBAAgBK,MAAM,iBACvCR,EAAMW,MADX,c,sECdHC,EAAW,SAACC,GAErB,OADgB,YAAOA,GACLC,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEL,MAAQM,EAAEN,OACvC,EAAI,MAETO,EAAiB,CACnBP,MAAO,CACHQ,IAAK,UACLC,WAAY,KAEhBC,UAAW,CACPF,IAAK,UACLC,WAAY,MAEhBE,OAAQ,CACJH,IAAK,UACLC,WAAY,MA2BPG,EAAkB,SAACC,GAC5B,OAAOA,EAAI,WAAOC,IAAQD,GAAME,OAAO,SAAY,MC1BxCC,EAhBH,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,UAAWC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KACxC,OACI,yBAAK3B,UAAU,OACX,kBAAC,IAAD,CAAY0B,OAAQA,EAAQC,KAAMA,GAC9B,kBAACC,EAAA,EAAD,CACIC,IAAI,qDACJC,YAAY,uFDaH,SAACpB,GAA8B,IAAxBe,EAAuB,uDAAZ,QAC3C,OAAOf,EAAKqB,KAAI,SAACC,GACb,OAAQ,kBAACC,EAAA,EAAD,CAAQP,OAAQ,CAACM,EAAQE,YAAYC,IAAKH,EAAQE,YAAYE,MAClEC,YAAa,GACbhC,MAAOS,EAAeW,GAAUV,IAChCuB,UAAWxB,EAAeW,GAAUV,IACpCwB,OAAQC,KAAKC,KAAKT,EAAQP,IACpBX,EAAeW,GAAUT,YAC/B,kBAAC0B,EAAA,EAAD,KACI,yBAAK1C,UAAU,kBACX,yBAAKA,UAAU,YAAY2C,MAAO,CAAEC,gBAAgB,OAAD,OAASZ,EAAQE,YAAYW,KAA7B,QACnD,yBAAK7C,UAAU,aAAagC,EAAQA,SACpC,yBAAKhC,UAAU,kBAAf,SAAuCqB,IAAQW,EAAQzB,OAAOe,OAAO,QACrE,yBAAKtB,UAAU,kBAAf,aAA2CqB,IAAQW,EAAQf,WAAWK,OAAO,QAC7E,yBAAKtB,UAAU,eAAf,UAAqCqB,IAAQW,EAAQd,QAAQI,OAAO,cCvBvEwB,CAActB,EAAWC,MCE3BsB,G,OAdD,SAAC,GAAmB,IAAjBvB,EAAgB,EAAhBA,UACb,OACI,yBAAKxB,UAAU,SACVwB,EAAUO,KAAI,SAACiB,GACZ,OACI,4BACI,4BAAKA,EAAMhB,SACX,4BAAI,gCAASX,IAAQ2B,EAAMzC,OAAOe,OAAO,gB,yBCN3D2B,EAAU,CACZC,OAAQ,CACJC,SAAS,GAEbC,SAAU,CACNC,OAAQ,CACJd,OAAQ,IAGhBe,qBAAqB,EACrBC,SAAU,CACNC,KAAM,QACNC,WAAW,EACXC,UAAW,CACPC,MAAO,SAAUC,EAAalD,GAC1B,OAAOW,IAAQuC,EAAYZ,OAAO1B,OAAO,WAIrDuC,OAAQ,CACJC,MAAO,CACH,CACIC,KAAM,OACNC,KAAM,CACF1C,OAAQ,WACR2C,cAAe,QAI3BC,MAAO,CACH,CACIC,UAAW,CACPhB,SAAS,GAEbiB,MAAO,CACHC,SAAU,SAAUrB,EAAOsB,EAAOC,GAC9B,OAAOlD,IAAQ2B,GAAO1B,OAAO,YAO/CkD,EAAiB,SAAC9D,GAA8B,IAE9C+D,EAFsBhD,EAAuB,uDAAZ,QAC/BiD,EAAY,GAElB,IAAK,IAAIC,KAAQjE,EAAKH,MAAO,CACzB,GAAIkE,EAAe,CACf,IAAIG,EAAe,CACfC,EAAGF,EACHG,EAAGpE,EAAKe,GAAUkD,GAAQF,GAE9BC,EAAUK,KAAKH,GAEnBH,EAAgB/D,EAAKe,GAAUkD,GAEnC,OAAOD,GAoCIM,EAlCG,SAAC,GAAsC,IAAD,IAAnCvD,gBAAmC,MAAxB,QAAwB,EAAZ5B,EAAY,8BAC5BoF,mBAAS,IADmB,mBAC7CvE,EAD6C,KACvCwE,EADuC,KAepD,OAbAC,qBAAU,YACS,uCAAG,sBAAAvE,EAAA,sEACRwE,MAAM,8DACPC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAC3E,GACH,IAAIgE,EAAYF,EAAe9D,EAAMe,GACrCyD,EAAQR,MALF,2CAAH,qDAQfc,KACD,CAAC/D,IAIA,yBAAKzB,UAAWH,EAAMG,YACb,OAAJU,QAAI,IAAJA,OAAA,EAAAA,EAAM+E,QAAS,GACZ,kBAAC,OAAD,CACI/E,KAAM,CACFgF,SAAU,CACN,CACIC,gBAAiB,sBACjBC,YAAa,UACblF,KAAMA,KAIlBuC,QAASA,MCqBd4C,G,OApGH,WAAO,IAAD,EACkBZ,mBAAS,IAD3B,mBACTzD,EADS,KACEsE,EADF,OAE8Bb,mBAAS,aAFvC,mBAETc,EAFS,KAEQC,EAFR,OAGsBf,mBAAS,IAH/B,mBAGT/C,EAHS,KAGI+D,EAHJ,OAIkBhB,mBAAS,IAJ3B,mBAITiB,EAJS,KAIEC,EAJF,OAKkBlB,mBAAS,CAAE9C,IAAK,SAAUiE,KAAM,UALlD,mBAKTC,EALS,KAKEC,EALF,OAMcrB,mBAAS,GANvB,mBAMTsB,EANS,KAMAC,EANA,OAOwBvB,mBAAS,IAPjC,mBAOTwB,EAPS,KAOKC,EAPL,OAQgBzB,mBAAS,SARzB,mBAQTxD,EARS,KAQCkF,EARD,KAWhBxB,qBAAU,WACRC,MAAM,sCACHC,MAAK,SAACuB,GAAD,OAAcA,EAASrB,UAC5BF,MAAK,SAAC3E,GACLuF,EAAevF,QAElB,IAEHyE,qBAAU,YAEc,uCAAG,sBAAAvE,EAAA,sEACjBwE,MAAM,4CACTC,MAAK,SAACuB,GAAD,OAAcA,EAASrB,UAC5BF,MAAK,SAAC3E,GACL,IAAIc,EAAYd,EAAKqB,KAAI,SAACC,GACxB,MAAQ,CACN6E,KAAM7E,EAAQA,QACdgB,MAAOhB,EAAQE,YAAY4E,SAG/BtF,EAAYA,EAAUuF,QAAO,SAAC/E,GAAD,OAA+B,OAAlBA,EAAQgB,SAClD,IAAMgE,EAAavG,EAASC,GAC5ByF,EAAaa,GACblB,EAAatE,GACbkF,EAAgBhG,MAdG,2CAAH,qDAiBtBuG,KACC,IACHC,QAAQC,IAAI,YAAajB,GACzB,IAAMkB,EAAe,uCAAG,WAAOC,GAAP,iBAAAzG,EAAA,6DAChB0G,EAAcD,EAAME,OAAOvE,MACjCgD,EAAmBsB,GAGbzF,EAAsB,cAAhByF,EACR,qCADQ,mDAEoCA,GAP1B,SAShBlC,MAAMvD,GACTwD,MAAK,SAACuB,GAAD,OAAcA,EAASrB,UAC5BF,MAAK,SAAC3E,GACLsF,EAAmBsB,GAEnBrB,EAAevF,GACf,IAAM8G,EAAyB,cAAhBF,EAA8B,CAAEnF,IAAK,SAAUiE,KAAM,SAChE,CAAEjE,IAAKzB,EAAKwB,YAAYC,IAAKiE,IAAK1F,EAAKwB,YAAYE,MACvDkE,EAAakB,GACbhB,EAAW,MAlBO,2CAAH,sDAsBrB,OACE,yBAAKxG,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,cACb,gDACA,kBAACyH,EAAA,EAAD,CAAazH,UAAU,gBACrB,kBAAC0H,EAAA,EAAD,CAAQC,QAAQ,WAAWC,SAAUR,EAAiBpE,MAAO+C,GAC3D,kBAAC8B,EAAA,EAAD,CAAU7E,MAAM,aAAhB,aACCxB,EAAUO,KAAI,SAACC,GACd,OAAO,kBAAC6F,EAAA,EAAD,CAAU7E,MAAOhB,EAAQgB,OAAQhB,EAAQ6E,YAKxD,yBAAK7G,UAAU,aACb,kBAAC,EAAD,CAASE,OAAK,EAACD,OAAqB,UAAbwB,EAAsB1B,QAAS,SAAC+H,GAAQ,OAAOnB,EAAY,UAAYrG,MAAM,qBAAqBC,MAAOY,EAAgBe,EAAY6F,YAAavH,MAAOW,EAAgBe,EAAY3B,SAE5M,kBAAC,EAAD,CAASN,OAAqB,cAAbwB,EAA0B1B,QAAS,SAAC+H,GAAQ,OAAOnB,EAAY,cAAgBrG,MAAM,aAAaC,MAAOY,EAAgBe,EAAY8F,gBAAiBxH,MAAOW,EAAgBe,EAAYjB,aAE1M,kBAAC,EAAD,CAASf,OAAK,EAACD,OAAqB,WAAbwB,EAAuB1B,QAAS,SAAC+H,GAAQ,OAAOnB,EAAY,WAAarG,MAAM,UAAUC,MAAOY,EAAgBe,EAAY+F,aAAczH,MAAOW,EAAgBe,EAAYhB,WAGtM,kBAAC,EAAD,CAAKO,SAAUA,EAAUD,UAAWiF,EAAc/E,OAAQ2E,EAAW1E,KAAM4E,KAE7E,kBAACzG,EAAA,EAAD,CAAME,UAAU,aACd,kBAACG,EAAA,EAAD,KACE,qDACA,kBAAC,EAAD,CAAOqB,UAAW0E,IAClB,wBAAIlG,UAAU,mBAAd,kBAAgDyB,GAEhD,kBAAC,EAAD,CAAWzB,UAAU,YAAYyB,SAAUA,SC5FjCyG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzD,MAAK,SAAA0D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,a","file":"static/js/main.5107f810.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from '@material-ui/core'\r\nimport React from 'react';\r\nimport './Infobox.css';\r\n\r\nconst Infobox = (props) => {\r\n    return (\r\n        <Card onClick={props.onClick} className={`infoBox ${props.active && 'infoBox--selected'} ${(props.isRed && props.active) && 'infoBox--red'}`}>\r\n            <CardContent>\r\n                {/* title */}\r\n                <Typography className=\"infoBox_title\" color=\"textSecondary\">\r\n                    {props.title}\r\n                </Typography>\r\n\r\n                {/* no of cases */}\r\n                <h2 className={`infoBox_cases ${!props.isRed && 'infoBox_cases--green'}`}>{props.cases}</h2>\r\n\r\n                {/* total */}\r\n                <Typography className=\"infoBox_total\" color=\"textSecondary\">\r\n                    {props.total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default Infobox\r\n","import React from 'react';\r\nimport numeral from 'numeral';\r\nimport { Circle, Popup } from \"react-leaflet\";\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n    return sortedData.sort((a, b) => (a.cases > b.cases)\r\n        ? -1 : 1)\r\n};\r\nconst caseTypeColors = {\r\n    cases: {\r\n        hex: '#CC1034',\r\n        multiplier: 800,\r\n    },\r\n    recovered: {\r\n        hex: '#7dd71d',\r\n        multiplier: 1200,\r\n    },\r\n    deaths: {\r\n        hex: '#fb4443',\r\n        multiplier: 2000,\r\n    },\r\n};\r\n// draw circles on map with interactive tooltip\r\n\r\nexport const showDataOnMap = (data, caseType = \"cases\") => {\r\n    return data.map((country) => {\r\n        return (<Circle center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            fillOpacity={0.4}\r\n            color={caseTypeColors[caseType].hex}\r\n            fillColor={caseTypeColors[caseType].hex}\r\n            radius={Math.sqrt(country[caseType])\r\n                * caseTypeColors[caseType].multiplier}>\r\n            <Popup>\r\n                <div className=\"info-container\">\r\n                    <div className=\"info-flag\" style={{ backgroundImage: `url(${country.countryInfo.flag})` }} />\r\n                    <div className='info-name'>{country.country}</div>\r\n                    <div className=\"info-confirmed\">Cases:{numeral(country.cases).format('0,0')}</div>\r\n                    <div className=\"info-recovered\">Recovered:{numeral(country.recovered).format('0,0')}</div>\r\n                    <div className=\"info-deaths\">deaths:{numeral(country.deaths).format('0,0')}</div>\r\n                </div>\r\n            </Popup>\r\n\r\n        </Circle>);\r\n    })\r\n}\r\n\r\nexport const prettyPrintStat = (stat) => {\r\n    return stat ? `+${numeral(stat).format('0.0a')}` : null;\r\n}","import React from 'react';\r\nimport \"./Map.css\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport { showDataOnMap } from './util';\r\n\r\nconst Map = ({ countries, caseType, center, zoom }) => {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"https://osm.org/copyright\">        \r\n                    OpenStreetMap</a> contributors'\r\n                />\r\n                {/* loop through countries and draw circles on them */}\r\n                {showDataOnMap(countries, caseType)}\r\n            </LeafletMap>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map\r\n","import React from 'react';\r\nimport numeral from 'numeral';\r\nimport './Table.css';\r\nconst Table = ({ countries }) => {\r\n    return (\r\n        <div className='table'>\r\n            {countries.map((value) => {\r\n                return (\r\n                    <tr>\r\n                        <td>{value.country}</td>\r\n                        <td><strong>{numeral(value.cases).format(\"0,0\")}</strong></td>\r\n                    </tr>)\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table","import React, { useState, useEffect } from 'react'\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from 'numeral';\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        points: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n}\r\nconst BuildChartData = (data, caseType = \"cases\") => {\r\n    const chartData = [];\r\n    let lastDataPoint;\r\n    for (let date in data.cases) {\r\n        if (lastDataPoint) {\r\n            let newDataPoint = {\r\n                x: date,\r\n                y: data[caseType][date] - lastDataPoint,\r\n            };\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[caseType][date];\r\n    }\r\n    return chartData;\r\n}\r\nconst LineGraph = ({ caseType = 'cases', ...props }) => {\r\n    const [data, setData] = useState({});\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n                .then((Response) => Response.json())\r\n                .then((data) => {\r\n                    let chartData = BuildChartData(data, caseType);\r\n                    setData(chartData);\r\n                })\r\n        }\r\n        fetchData();\r\n    }, [caseType]);\r\n\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length > 0 && (\r\n                <Line\r\n                    data={{\r\n                        datasets: [\r\n                            {\r\n                                backgroundColor: 'rgba(204,16,52,0.5)',\r\n                                borderColor: \"#CC1034\",\r\n                                data: data,\r\n                            },\r\n                        ],\r\n                    }}\r\n                    options={options} />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import { FormControl, MenuItem, Select, Card, CardContent } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport Infobox from './Infobox';\nimport Map from './Map';\nimport Table from './Table';\nimport './App.css';\nimport { prettyPrintStat, sortData } from './util';\nimport LineGraph from './LineGraph';\nimport \"leaflet/dist/leaflet.css\";\n\n\nconst App = () => {\n  const [countries, setCountries] = useState([]); //it is to list all countries\n  const [selectedCountry, setSelectedcountry] = useState(\"worldwide\"); //to take a note which country is selected\n  const [countryInfo, setCountryInfo] = useState({}); // to get the data of selected country\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [caseType, setCaseType] = useState('cases');\n\n  // to show the world wide data before selecting anything\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      })\n  }, [])\n  // useEffect runs a piece of code based on given condition\n  useEffect(() => {\n    // async-> send a request, wait for it, do something with info\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          let countries = data.map((country) => {\n            return ({\n              name: country.country,\n              value: country.countryInfo.iso2\n            });\n          });\n          countries = countries.filter((country) => country.value !== null); //filtring out countries which have no data\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setCountries(countries);\n          setMapCountries(data);\n        })\n    }\n    getCountriesData();\n  }, []);\n  console.log(\"tabledata\", tableData);\n  const onCountrychange = async (event) => {\n    const countryCode = event.target.value;\n    setSelectedcountry(countryCode);\n    // for worldwide \"https://disease.sh/v3/covid-19/all\"\n    // for countries \"https://disease.sh/v3/covid-19/countries/[COUNTRY_CODE]\"\n    const url = countryCode === \"worldwide\"\n      ? 'https://disease.sh/v3/covid-19/all'\n      : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setSelectedcountry(countryCode);\n        // all of data from selected country\n        setCountryInfo(data);\n        const mapObj = countryCode === \"worldwide\" ? { lat: 34.80746, lng: -40.4796 }\n          : { lat: data.countryInfo.lat, lng: data.countryInfo.long };\n        setMapCenter(mapObj);\n        setMapZoom(3); //same as initial value because map glitch it dont changes when first country is selected\n      })\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app_left\">\n        <div className=\"app_header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app_dropdown\">\n            <Select variant=\"outlined\" onChange={onCountrychange} value={selectedCountry}>\n              <MenuItem value=\"worldwide\">WorldWide</MenuItem>\n              {countries.map((country) => {\n                return <MenuItem value={country.value}>{country.name}</MenuItem>\n              })}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app_stats\">\n          <Infobox isRed active={caseType === 'cases'} onClick={(e) => { return setCaseType('cases') }} title=\" Coronavirus Cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)} />\n\n          <Infobox active={caseType === 'recovered'} onClick={(e) => { return setCaseType('recovered') }} title=\" Recovered\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)} />\n\n          <Infobox isRed active={caseType === 'deaths'} onClick={(e) => { return setCaseType('deaths') }} title=\" Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)} />\n        </div>\n\n        <Map caseType={caseType} countries={mapCountries} center={mapCenter} zoom={mapZoom} />\n      </div>\n      <Card className='app_right'>\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app_graph_title\">World Wide New {caseType}</h3>\n\n          <LineGraph className=\"app_graph\" caseType={caseType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}